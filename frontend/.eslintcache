[{"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Register.tsx":"1","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Logout.tsx":"2","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Login.tsx":"3","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/App.tsx":"4","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/login.ts":"5","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/serviceWorkerRegistration.ts":"6","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reportWebVitals.ts":"7","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/index.tsx":"8","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Main.tsx":"9","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Home.tsx":"10","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/register.ts":"11","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/getEntity.ts":"12","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/isLoggedIn.ts":"13","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/actions/actions.ts":"14","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/reducers.ts":"15","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Header.tsx":"16","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/PopoverSectionForm.tsx":"17","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/sections.ts":"18","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/DarkModeSwitch.tsx":"19","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/ContextMenuItems.tsx":"20","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/deleteEntity.ts":"21","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/DecksView.tsx":"22","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/decks.ts":"23","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/PopoverDeckForm.tsx":"24","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/LoadingSpinner.tsx":"25","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/CardsView.tsx":"26","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/cards.ts":"27"},{"size":3023,"mtime":1612735288270,"results":"28","hashOfConfig":"29"},{"size":788,"mtime":1612743491650,"results":"30","hashOfConfig":"29"},{"size":3672,"mtime":1613498023265,"results":"31","hashOfConfig":"29"},{"size":449,"mtime":1613230131166,"results":"32","hashOfConfig":"29"},{"size":684,"mtime":1613430708310,"results":"33","hashOfConfig":"29"},{"size":5256,"mtime":1612131999142,"results":"34","hashOfConfig":"29"},{"size":425,"mtime":1612131999142,"results":"35","hashOfConfig":"29"},{"size":869,"mtime":1613766654395,"results":"36","hashOfConfig":"29"},{"size":3457,"mtime":1613505146225,"results":"37","hashOfConfig":"29"},{"size":150,"mtime":1612212251372,"results":"38","hashOfConfig":"29"},{"size":736,"mtime":1612735293640,"results":"39","hashOfConfig":"29"},{"size":449,"mtime":1612741233970,"results":"40","hashOfConfig":"29"},{"size":279,"mtime":1613498152975,"results":"41","hashOfConfig":"29"},{"size":654,"mtime":1613768151845,"results":"42","hashOfConfig":"29"},{"size":389,"mtime":1613768844115,"results":"43","hashOfConfig":"29"},{"size":3247,"mtime":1613765335915,"results":"44","hashOfConfig":"29"},{"size":3232,"mtime":1613430800030,"results":"45","hashOfConfig":"29"},{"size":290,"mtime":1613235598016,"results":"46","hashOfConfig":"29"},{"size":712,"mtime":1613253596216,"results":"47","hashOfConfig":"29"},{"size":2847,"mtime":1613502363075,"results":"48","hashOfConfig":"29"},{"size":380,"mtime":1613427328010,"results":"49","hashOfConfig":"29"},{"size":3750,"mtime":1613765444805,"results":"50","hashOfConfig":"29"},{"size":275,"mtime":1613498826445,"results":"51","hashOfConfig":"29"},{"size":3006,"mtime":1613505468285,"results":"52","hashOfConfig":"29"},{"size":194,"mtime":1613506920405,"results":"53","hashOfConfig":"29"},{"size":1382,"mtime":1615126653520,"results":"54","hashOfConfig":"29"},{"size":275,"mtime":1613768047365,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"vsafhj",{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Register.tsx",[],["118","119"],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Logout.tsx",["120"],"import { useEffect } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { Link as Clink } from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { signout } from \"../actions/actions\";\nimport { useDispatch } from \"react-redux\";\n\nfunction Logout() {\n    const dispatch = useDispatch();\n    const [, , removeCookie] = useCookies([\"authToken\"]);\n\n    useEffect(() => {\n        removeCookie(\"authToken\");\n        removeCookie(\"UUID\");\n        dispatch(signout());\n    }, []);\n\n    return (\n        <div>\n            <h1>Logout Page</h1>\n            <hr />\n            <h2>You have been logged out</h2>\n            <Clink color=\"blue.500\">\n                <Link to=\"/login\">Log in again</Link>\n            </Clink>\n        </div>\n    );\n}\n\nexport default Logout;\n","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Login.tsx",["121","122"],"import { useState, useEffect } from \"react\";\nimport { login } from \"../api/login\";\nimport {\n    Input,\n    InputGroup,\n    InputRightElement,\n    Button,\n    Heading,\n    VStack,\n    useToast,\n} from \"@chakra-ui/react\";\nimport { Redirect } from \"react-router\";\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\nimport { signin } from \"../actions/actions\";\nimport { useCookies } from \"react-cookie\";\n\nfunction Login() {\n    const [show, setShow] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [_, setCookie] = useCookies([\"authToken\"]);\n    const toast = useToast();\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector((state: RootStateOrAny) => state.isLoggedIn);\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            setRedirect(true);\n        }\n    }, []);\n\n    return redirect ? (\n        <Redirect to=\"/main\" />\n    ) : (\n        <div style={{ width: \"60%\", margin: \"auto\" }}>\n            <Heading>Login</Heading>\n            <form\n                onSubmit={async (e) => {\n                    e.preventDefault();\n                    const { successful, errmsg, value } = await login(\n                        email,\n                        password\n                    );\n\n                    if (successful) {\n                        let d = new Date();\n                        d.setDate(d.getDate() + 10);\n                        setCookie(\"authToken\", value, {\n                            path: \"/\",\n                            expires: d,\n                        });\n                        setCookie(\"UUID\", errmsg, {\n                            path: \"/\",\n                            expires: d,\n                        });\n\n                        dispatch(signin());\n\n                        setRedirect(true);\n                    } else {\n                        return toast({\n                            title: \"Oops...\",\n                            description: errmsg,\n                            status: \"error\",\n                            duration: 5000,\n                            isClosable: true,\n                        });\n                    }\n                }}\n            >\n                <VStack m=\"1rem auto 1rem auto\">\n                    <Input\n                        placeholder=\"e-mail\"\n                        name=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        type=\"email\"\n                    />\n\n                    <InputGroup size=\"md\">\n                        <Input\n                            pr=\"4.5rem\"\n                            type={show ? \"text\" : \"password\"}\n                            name=\"password\"\n                            placeholder=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                        <InputRightElement width=\"4.5rem\">\n                            <Button\n                                h=\"1.75rem\"\n                                size=\"sm\"\n                                onClick={() => setShow(!show)}\n                            >\n                                {show ? \"Hide\" : \"Show\"}\n                            </Button>\n                        </InputRightElement>\n                    </InputGroup>\n                </VStack>\n                <Button colorScheme=\"blue\" type=\"submit\">\n                    Login\n                </Button>\n            </form>\n        </div>\n    );\n}\n\nexport default Login;\n","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/App.tsx",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/login.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/serviceWorkerRegistration.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reportWebVitals.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/index.tsx",["123"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { CookiesProvider } from \"react-cookie\";\nimport { createStore, compose } from \"redux\";\nimport allReducers from \"./reducers/reducers\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(allReducers, composeWithDevTools());\n\nReactDOM.render(\n    <CookiesProvider>\n        <Provider store={store}>\n            <ChakraProvider>\n                <App />\n            </ChakraProvider>\n        </Provider>\n    </CookiesProvider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n\nreportWebVitals();\n","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Main.tsx",["124"],"import { useState, useEffect } from \"react\";\nimport {\n    Heading,\n    VStack,\n    Divider,\n    Button,\n    Box,\n    useColorMode,\n} from \"@chakra-ui/react\";\nimport { PopoverSectionForm } from \"./PopoverSectionForm\";\nimport { ContextMenuItems } from \"./ContextMenuItems\";\nimport { ContextMenu, ContextMenuTrigger } from \"react-contextmenu\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\nimport { alterSections } from \"../actions/actions\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\n\nfunction Main() {\n    const isLoggedIn = useSelector((state: RootStateOrAny) => state.isLoggedIn);\n    const sections: any[] = useSelector(\n        (state: RootStateOrAny) => state.sections\n    );\n    const dispatch = useDispatch();\n    const [redirect, setRedirect] = useState(false);\n    const [cookie] = useCookies([\"UUID\"]);\n    const { colorMode } = useColorMode();\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            setRedirect(true);\n        } else {\n            getSectionsByUser(cookie.UUID);\n        }\n    }, []);\n\n    const getSectionsByUser = async (UUID: string | number) => {\n        const options: AxiosRequestConfig = {\n            url: `http://localhost:8080/user/${UUID}`,\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            },\n        };\n\n        let res = await axios(options);\n        dispatch(alterSections(res.data.Sections));\n    };\n\n    const putSectionsByUser = () => {\n        let bgcolor = \"\";\n        colorMode === \"dark\" ? (bgcolor = \"#1A202C\") : (bgcolor = \"whitesmoke\");\n        const sectionsElt = sections.map((section: any, key: number) => (\n            <Box key={key}>\n                <ContextMenuTrigger id={section.ID}>\n                    <Link key={key} to={`/main/${section.ID}`}>\n                        <Button\n                            minWidth=\"15rem\"\n                            m=\"0.5rem 1rem\"\n                            id={section.ID}\n                        >\n                            {section.Title}\n                        </Button>\n                    </Link>\n                </ContextMenuTrigger>\n\n                <ContextMenu\n                    id={section.ID}\n                    style={{\n                        opacity: \"100%\",\n                        backgroundColor: bgcolor,\n                        padding: \"3px\",\n                        boxShadow: \"3px 3px 20px rgba(79, 79, 79, 0.4)\",\n                        borderRadius: \"5px\",\n                        border: \"1px solid #3182ce\",\n                        zIndex: 1,\n                    }}\n                >\n                    <ContextMenuItems id={section.ID} entity=\"section\" />\n                </ContextMenu>\n            </Box>\n        ));\n        return sectionsElt;\n    };\n\n    return redirect ? (\n        <Redirect to=\"login\" />\n    ) : (\n        <>\n            <div style={{ margin: \"auto\", width: \"60%\", textAlign: \"center\" }}>\n                <Heading>✂ Sections</Heading>\n\n                <Divider orientation=\"horizontal\" />\n                <VStack>{putSectionsByUser()}</VStack>\n            </div>\n            <div style={{ margin: \"auto\", width: \"60%\", textAlign: \"right\" }}>\n                <PopoverSectionForm />\n            </div>\n        </>\n    );\n}\n\nexport default Main;\n","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Home.tsx",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/register.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/getEntity.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/isLoggedIn.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/actions/actions.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/reducers.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/Header.tsx",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/PopoverSectionForm.tsx",["125"],"import { useRef, useState, useEffect } from \"react\";\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport {\n    useDisclosure,\n    Popover,\n    PopoverContent,\n    PopoverArrow,\n    PopoverCloseButton,\n    Input,\n    PopoverTrigger,\n    IconButton,\n    Button,\n    InputGroup,\n    InputRightElement,\n} from \"@chakra-ui/react\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { useCookies } from \"react-cookie\";\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\nimport { alterSections } from \"../actions/actions\";\n\nexport function PopoverSectionForm() {\n    const [sectionTitle, setSectionTitle] = useState(\"\");\n    const { onOpen, onClose, isOpen } = useDisclosure();\n    const firstFieldRef = useRef(null);\n    const [cookie] = useCookies([\"UUID\"]);\n    const dispatch = useDispatch();\n    const sections = useSelector((state: RootStateOrAny) => state.sections);\n    let UUID: string;\n\n    useEffect(() => {\n        UUID = cookie.UUID;\n    });\n\n    const handleFormSubmit = async (id: number) => {\n        const options: AxiosRequestConfig = {\n            url: \"http://localhost:8080/create/section\",\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            },\n            data: {\n                title: sectionTitle,\n                UserID: id,\n            },\n        };\n\n        let res = await axios(options);\n        let sectionsToDispatch = sections.concat([res.data.Value]);\n        dispatch(alterSections(sectionsToDispatch));\n        setSectionTitle(\"\");\n    };\n    return (\n        <Popover\n            isOpen={isOpen}\n            initialFocusRef={firstFieldRef}\n            onOpen={onOpen}\n            onClose={onClose}\n            placement=\"right\"\n            closeOnBlur={true}\n        >\n            <PopoverTrigger>\n                <IconButton\n                    mt=\"3rem\"\n                    size=\"md\"\n                    aria-label=\"Add Section\"\n                    icon={<AddIcon />}\n                />\n            </PopoverTrigger>\n            <PopoverContent p=\"7\">\n                <PopoverArrow />\n                <PopoverCloseButton />\n                <form\n                    onSubmit={(e) => {\n                        e.preventDefault();\n                        handleFormSubmit(Number(UUID));\n                    }}\n                >\n                    <InputGroup>\n                        <Input\n                            ref={firstFieldRef}\n                            placeholder=\"New Section Title\"\n                            value={sectionTitle}\n                            onChange={(e) => setSectionTitle(e.target.value)}\n                        />\n\n                        <InputRightElement w=\"4.5rem\">\n                            <Button\n                                h=\"1.75rem\"\n                                colorScheme=\"green\"\n                                type=\"submit\"\n                            >\n                                Add\n                            </Button>\n                        </InputRightElement>\n                    </InputGroup>\n                </form>\n            </PopoverContent>\n        </Popover>\n    );\n}\n","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/sections.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/DarkModeSwitch.tsx",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/ContextMenuItems.tsx",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/api/deleteEntity.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/DecksView.tsx",["126"],"import React, { useEffect, useState } from \"react\";\nimport { PopoverDeckForm } from \"./PopoverDeckForm\";\nimport { useParams } from \"react-router-dom\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { useDispatch, useSelector, RootStateOrAny } from \"react-redux\";\nimport { alterDecks } from \"../actions/actions\";\nimport { ContextMenuItems } from \"./ContextMenuItems\";\nimport { ContextMenu, ContextMenuTrigger } from \"react-contextmenu\";\nimport {\n    Heading,\n    VStack,\n    Divider,\n    Button,\n    Breadcrumb,\n    BreadcrumbItem,\n    useColorMode,\n} from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { LoadingSpinner } from \"./LoadingSpinner\";\n\nfunction DecksView() {\n    const { sid } = useParams<any>();\n    const dispatch = useDispatch();\n    const decks = useSelector((state: RootStateOrAny) => state.decks);\n    const { colorMode } = useColorMode();\n    const [currSection, setCurrSection] = useState<any>({});\n\n    useEffect(() => {\n        getDecksBySection(sid);\n    }, []);\n\n    const getDecksBySection = async (ID: string | number) => {\n        const options: AxiosRequestConfig = {\n            url: `http://localhost:8080/get/section/${ID}`,\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            },\n        };\n\n        let res = await axios(options);\n        dispatch(alterDecks(res.data.Decks));\n        setCurrSection({ ...res.data });\n    };\n\n    const putDecksBySection = () => {\n        let bgcolor = \"\";\n        colorMode === \"dark\" ? (bgcolor = \"#1A202C\") : (bgcolor = \"whitesmoke\");\n        const decksElt = decks.map((deck: any, key: number) => (\n            <div>\n                <Link to={`/main/${sid}/${deck.ID}/cards`}>\n                    <ContextMenuTrigger id={deck.ID}>\n                        <Button minWidth=\"15rem\" key={key}>\n                            {deck.Title}\n                        </Button>\n                    </ContextMenuTrigger>\n                </Link>\n\n                <ContextMenu\n                    id={deck.ID}\n                    style={{\n                        opacity: \"100%\",\n                        backgroundColor: bgcolor,\n                        padding: \"3px\",\n                        boxShadow: \"3px 3px 20px rgba(79, 79, 79, 0.4)\",\n                        borderRadius: \"5px\",\n                        border: \"1px solid #3182ce\",\n                        zIndex: 1,\n                    }}\n                >\n                    <ContextMenuItems id={deck.ID} entity=\"deck\" />\n                </ContextMenu>\n            </div>\n        ));\n\n        return decksElt;\n    };\n\n    return currSection === {} ? (\n        <LoadingSpinner />\n    ) : (\n        <div>\n            <Breadcrumb>\n                <BreadcrumbItem>\n                    <Link to=\"/main\">Home</Link>\n                </BreadcrumbItem>\n\n                <BreadcrumbItem>\n                    <Link to={`/main/${sid}`}>{currSection.Title}</Link>\n                </BreadcrumbItem>\n            </Breadcrumb>\n            <div\n                style={{\n                    textAlign: \"center\",\n                    width: \"60%\",\n                    margin: \"auto\",\n                }}\n            >\n                <Heading as=\"h1\">{currSection.Title}</Heading>\n                <Divider m=\"2rem 0\" />\n                <VStack>{putDecksBySection()}</VStack>\n            </div>\n            <div\n                style={{\n                    margin: \"auto\",\n                    width: \"60%\",\n                    textAlign: \"right\",\n                }}\n            >\n                <PopoverDeckForm id={Number(sid)} />\n            </div>\n        </div>\n    );\n}\n\nexport default DecksView;\n","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/decks.ts",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/PopoverDeckForm.tsx",[],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/LoadingSpinner.tsx",["127"],"import { keyframes } from \"@chakra-ui/system\";\nimport React from \"react\";\nimport \"../scss/LoadingSpinner.scss\";\n\nexport function LoadingSpinner() {\n    return <div className=\"spinner\"></div>;\n}\n","/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/components/CardsView.tsx",["128","129"],"/home/jack/go/src/github.com/JackWinterburn/stacken/frontend/src/reducers/cards.ts",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":16,"column":8,"nodeType":"136","endLine":16,"endColumn":10,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":22,"column":12,"nodeType":"140","messageId":"141","endLine":22,"endColumn":13},{"ruleId":"134","severity":1,"message":"142","line":31,"column":8,"nodeType":"136","endLine":31,"endColumn":10,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"144","line":8,"column":23,"nodeType":"140","messageId":"141","endLine":8,"endColumn":30},{"ruleId":"134","severity":1,"message":"145","line":35,"column":8,"nodeType":"136","endLine":35,"endColumn":10,"suggestions":"146"},{"ruleId":"134","severity":1,"message":"147","line":31,"column":16,"nodeType":"148","endLine":31,"endColumn":27},{"ruleId":"134","severity":1,"message":"149","line":30,"column":8,"nodeType":"136","endLine":30,"endColumn":10,"suggestions":"150"},{"ruleId":"138","severity":1,"message":"151","line":1,"column":10,"nodeType":"140","messageId":"141","endLine":1,"endColumn":19},{"ruleId":"138","severity":1,"message":"152","line":1,"column":28,"nodeType":"140","messageId":"141","endLine":1,"endColumn":36},{"ruleId":"134","severity":1,"message":"153","line":16,"column":8,"nodeType":"136","endLine":16,"endColumn":10,"suggestions":"154"},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'removeCookie'. Either include them or remove the dependency array.","ArrayExpression",["157"],"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'isLoggedIn'. Either include it or remove the dependency array.",["158"],"'compose' is defined but never used.","React Hook useEffect has missing dependencies: 'cookie.UUID', 'getSectionsByUser', and 'isLoggedIn'. Either include them or remove the dependency array.",["159"],"Assignments to the 'UUID' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","React Hook useEffect has missing dependencies: 'getDecksBySection' and 'sid'. Either include them or remove the dependency array.",["160"],"'keyframes' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'did' and 'getCardsByDeck'. Either include them or remove the dependency array.",["161"],"no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [dispatch, removeCookie]",{"range":"172","text":"173"},"Update the dependencies array to be: [isLoggedIn]",{"range":"174","text":"175"},"Update the dependencies array to be: [cookie.UUID, getSectionsByUser, isLoggedIn]",{"range":"176","text":"177"},"Update the dependencies array to be: [getDecksBySection, sid]",{"range":"178","text":"179"},"Update the dependencies array to be: [did, getCardsByDeck]",{"range":"180","text":"181"},[497,499],"[dispatch, removeCookie]",[931,933],"[isLoggedIn]",[1141,1143],"[cookie.UUID, getSectionsByUser, isLoggedIn]",[1013,1015],"[getDecksBySection, sid]",[565,567],"[did, getCardsByDeck]"]